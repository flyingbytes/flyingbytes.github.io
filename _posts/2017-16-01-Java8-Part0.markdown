---
layout: post
title: "An Introduction to Functional Programming in Java 8: Part 0 - Motivation"
date: 2017-01-16 12:00:00 +0100
categories: java8 functionalProgramming introduction Motivation part0
---

As I've seen in my [previous post][prev-post], the interest in functional programming is high. This is the reason I want to write an introduction about it.

I work a lot in Haskell and Java in my free time. The idea to combine both of these languages in Java was a dream come true. After this introduction, I hope you will feel the same.

## What is functional programming, really?

You might have heared about functional programming (*FP*) and how great it is to reduce your LOC and to enhance the readability of your code.
But what does it really mean to program functional and what are the main differences to OOP?

### 1. All variables are final

{% highlight java %}
Lets look at this function to greet some users. First of, it is written OO.
 public String greet(List<String> names) {
    String greeting = "Welcome ";
    for(String name : names) {
        greeting += name + " "; // We don't care about the last space right now.
    }
    greeting += "!";
    return greeting;
}
{% endhighlight %}

This is a perfectly valid function to create such a greet String in Java.

But if you you are FP, this won't work. You change the state of greeting, which is not allowed in FP.
So if you try to make greeting final, you would get an error. Every time you use += with that String,
you change its state.

What you basically do in FP is the concatination of all names in one line into one String.

{% highlight java %}
public String greet(List<String> names) {
    final String reducedString = "Welcome " + names.get(0) + " " + names.get(1) + " " + ...
            + names.get(names.size()-1) + " ";
    return reducedString + "!";
}
{% endhighlight %}

If you think think that this looks nasty, you're right! But there is a FP function to make this nicer.

I will give you the right FP function here. Don't worry if you don't understand it now, I will talk about all of this in later posts.

{% highlight java %}
public String greet(List<String> names) {
    String greeting = names
            .stream()
            .map(name -> name + " ")
            .reduce("Welcome ",
                    (acc, name) -> acc + name);
    return greeting + "!";
}
{% endhighlight %}

The good think about final variables is that their value is always the same. This makes debugging and testing so much easier!

### 2. Don't use global variables (and forget about side effects)

I've choosen the example of a global time object. You write a static function, which returns the current time as a String. A OO function could look like this:

{% highlight java %}
public class Utils {

    private static Time time;

    public static String currTime() {
        return time.now().toString();
    }

}
{% endhighlight %}

If you use `currTime` twice, the result will be different, because the time will be different. Although we had the same input
(which is none), `currTime` had two different results!

This can't happen in FP. Every method only depense on its parameters and on nothing else! So if we want to do something like this,
the Time object has to be a parameter of `currTime`:

{% highlight java %}
public class Utils {

    public static String currTime(Time time) {
        return time.now().toString();
    }

}
{% endhighlight %}

This might seem odd in the OO world, but it has some benefits.

On one hand, it is much easier to read the code. If you know that a method only relies on its parameter,
you don't have to look for global variables that do the magic in your method.
On the other hand, testing is much easier too! When you want to test the FP `currTime` method,
you can mock the Time object. In the OO version, it's really difficult to mock the static Time object.

### 3. Use functions as parameters

In FP, functions can be arguments of another function! How cool is that?
Just think of a function which adds 1 to every number of a `List<Integer>`. How would you do that OO? Here's a snippet:

{% highlight java %}
public List<Integer> addOne(List<Integer> numbers) {
    List<Integer> plusOne = new LinkedList<>();

    for(Integer number : numbers) {
        plusOne.add(number + 1);
    }

    return plusOne;
}
{% endhighlight %}

Now you have to handle two lists. This can be very confusing and leads to errors.
There is also the chance to change the state of numbers. This could lead to problems in later parts of the program

In FP, you can map a function with every element of a List. In this example this means, that you want to "map"
number+1 to every item in the list and store this in a new List.

Don't worry if you don't understand all of it now, we will learn about this later on. The FP method would look like this:

{% highlight java %}
public List<Integer> addOne(List<Integer> numbers) {
    return numbers
            .stream()
            .map(number -> number + 1)
            .collect(Collectors.toList());
}
{% endhighlight %}

This reduces the number of variables and therefore the places where you can make errors. Here, you create a new list and leave numbers like it is.

## Conclusion

I hope you can see the benefits of FP. Later on, you will learn to truly appreciate them.
Final variables are a big help in terms of multi-threading, the lack of global variables improves the testability and functions as parameters improve the code quality.

And don't worry, in the beginning you can mix OOP and FP in your code.

In the next part, we will talk about functions as parameters. Therefore, I will introduce anonymous function(*lambdas*) and method references.

I hope you liked this short introduction in the big topic of functional programming. Please write me when something's not clear. Or are there any reason for you to hate functional programming at all? I would love to discuss these topics with you.

<div id="disqus_thread"></div>
<script>

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = '//flyingbytes.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>

[prev-post]: https://nwuensche.github.io/java8/functionalprogramming/functional/2017/01/02/DFS-BFS.html
