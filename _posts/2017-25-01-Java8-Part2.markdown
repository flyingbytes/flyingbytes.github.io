---
layout: post
title:  "An Introduction to Functional Programming in Java 8: Part 1 - Optionals"
date:   2017-01-23 13:00:00 +0100
categories: programming java8 functional part2
---

Hello everybody,

After we've made our first big steps into functional programming in the [last post][part1], we will talk about Optionals in today's part.

## Why do we need Optionals?
Hand on heart, you also think that null is annoying, don't you? For every argument which can be null, you have to check whether it is null or not. 
{% highlight java %}
if(argument == null) {
    throw new NullPointerException();
}
{% endhighlight %}

These lines suck! This is a boilerplate that bloats up your code and can be easily forgotten. So how can we fix that?

## Introducing Optionals
In Java 8, [java.util.Optional<T>][optionalJavaDoc] was invented to handle objects, which might not exists, better. 
It is a container object that can hold an object.
The Generic *T* is the type of the object you want to contain.

{% highlight java %}
Integer i = 5;
Optional<Integer> optinalI = Optional.of(i);
{% endhighlight %}

Optional doesn't has any public constructor. To create an optional, you have to use `Optional.of(object)` or `Optional.ofNullable(object)`.
You use the first one if the object is never, ever null. The second one is used for nullable objects.

### How do optionals work? 
Options have two states. They either hold an object or they hold null. If they hold null; optionals are called *empty*. If they are not empty, you can get the object in the optional by using *Optional.get()*. But be careful, because a *get()* on an empty optional will cause a `NoSuchElementException`. You can check:wq

#### Example: Playing with Optionals
{% highlight java %}
public void playingWithOptionals() {
    String s = "Hello World!"
    String nullString = null;

    Optional<String> optionalS1 = Optional.of(s); // Will work
    Optional<String> optionalS2 = Optional.ofNullable(s); // Will work too
    Optional<String> optionalNull1 = Optional.of(s); // -> NoSuchElementExeption TODO Wirklich
    Optional<String> optionalNull2 = Optional.ofNullable(s); // Will work

    System.out.print(optionalS1.get()) // prints "Hello World!"
    System.out.print(optionalNull2.get()) // -> "NoSuchElementExeption" TODO Wirklich?
    if(optionalNull1.equals(Optional.empty())) {
        System.out.print("Is empty") // Will be printed
    }
}
{% endhighlight %}


....
## When should you use null and when Optional.Empty


// TODO Irgendwo Optional Talk nutzen
## Conclusion
That's it for today!
We have made our first big steps towards functional programming in Java 8. First off, we have seen a lot of benefits of *fP*. After that, we have used our first function as an argument in another method by using method references and Lambdas(*anonymous functions*).

In part 2, we will introduce *Optionals* and how we can work with them properly.

Thank's for reading and have a nice day,

Niklas

<div id="disqus_thread"></div>
<script>

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = '//flyingbytes.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
</script>

<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>

[part1]: https://flyingbytes.github.io/programming/java8/functional/part1/2017/01/23/Java8-Part1.html
[optionalJavaDoc]: https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html
[optionalTalk]: https://www.youtube.com/watch?v=Ej0sss6cq14
